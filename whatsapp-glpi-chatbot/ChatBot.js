// ------------------------------------------------------------------------
// Nome do Projeto: WhatsApp Chatbot - Abertura de Chamados GLPI
//
// Texto Do Autor:
console.log("%cC√≥digo escrito por: Alexandre - EXOTERMO", "color: green");
console.log("Favor n√£o remover o log!")
//
// Licen√ßa: MIT
//
// A permiss√£o √© concedida, gratuitamente, para qualquer pessoa que obtenha uma
// c√≥pia deste software e dos arquivos de documenta√ß√£o associados (o "Software"),
// para usar o Software sem restri√ß√µes, incluindo, sem limita√ß√£o, os direitos
// de usar, copiar, modificar, mesclar, publicar, distribuir, sublicenciar e/ou
// vender c√≥pias do Software, e para permitir que as pessoas a quem o Software
// √© fornecido o fa√ßam, sujeito √†s seguintes condi√ß√µes:
//
// A c√≥pia do Software deve conter o aviso de copyright acima e esta lista de
// condi√ß√µes, e a seguinte declara√ß√£o de isen√ß√£o de responsabilidade:
// ------------------------------------------------------------------------
//
// C√≥digo escrito por: Ale
// Data de cria√ß√£o: 01/03/25
// √öltima modifica√ß√£o: 11/03/25
// Descri√ß√£o de modifica√ß√µes feitas: Coment√°rios, possibilitando melhor visualiza√ß√£o do codigo, e foi subido no github para uso da comunidade.
/* Descri√ß√£o: 
Este c√≥digo cria um bot para o WhatsApp que:

    1. Gera um QR code para autentica√ß√£o no WhatsApp Web.
    2. Oferece um menu de op√ß√µes para o usu√°rio, que inclui suporte t√©cnico.
    3. Coleta informa√ß√µes do usu√°rio, como nome, setor, e descri√ß√£o do problema.
    4. Cria um chamado no GLPI para o suporte t√©cnico.
    5. Envia mensagens para o usu√°rio com instru√ß√µes ou confirma√ß√µes de cria√ß√£o de chamados.
*/
// ------------------------------------------------------------------------


const qrcode = require('qrcode-terminal'); // define a variavel qrcode, requirindo a biblioteca 'qrcode-terminal' para gerar o QR code de autentica√ß√£o do WhatsApp Web.
const { Client, MessageMedia } = require('whatsapp-web.js');
/*
Explica√ß√£o dessa linha 'const { Client, MessageMedia } = require('whatsapp-web.js');' 

'Client' √© a classe principal da biblioteca whatsapp-web.js. Ela √© respons√°vel por iniciar e gerenciar a conex√£o com o whatsapp web.
'MessageMedia' √© uma classe usada para enviar m√≠dia (imagens, v√≠deos, √°udios) atrav√©s da biblioteca whatsapp-web.js.

*/

const axios = require('axios'); // define a variavel axios requirindo a biblioteca 'axios' possiblitando fazer requisi√ß√µes HTTP para o GLPI.
/*
axios, possibilita fazer 4 tipos de requisi√ß√µes como:

GET: Para obter dados.
POST: Para enviar dados.
PUT: Para atualizar dados.
DELETE: Para excluir.

*/

const glpi = require('./GLPI');  // Importando as fun√ß√µes do glpi.js

console.log("[INFO] Inicializando o bot..."); // log no terminal

/* caso seja necessario, encaminhe esse console.log para um arquivo.txt em uma pasta estruturada, usando rsyslog
*/

const client = new Client(); // passa a classe client da biblioteca do whats.js que gerenciar a conex√£o com o whats web
/*
new Client(), est√° criando um novo objeto que agora pode ser usado para iniciar a comunica√ß√£o com o WhatsApp.
*/

const userRequests = {}; // Array vazia para armazenar as intera√ß√µes de cada usu√°rio enquanto ele passa pelas etapas de abertura de chamados.

client.on('qr', qr => { 
//  .on('qr', ...) √© um ouvinte de evento, ele est√° esperando um evento espec√≠fico chamado qr. Esse evento √© disparado sempre que um novo QR Code √© gerado pelo WhatsApp Web para a autentica√ß√£o.
    console.log("[INFO] QR Code gerado, escaneie com o WhatsApp."); // log no terminal
    qrcode.generate(qr, { small: true }); 
    /*
    qrcode.generate recebe o conte√∫do do QR Code (qr) 
    e o exibe no terminal. O par√¢metro { small: true } faz com que o QR Code seja gerado em um formato menor, para que se ajuste melhor ao terminal
    */
});

client.on('ready', () => {
    /*
    .on('ready', ...) 
    configura o bot para ouvir quando a conex√£o com o WhatsApp foi feita com sucesso. 
    Quando isso ocorre, a fun√ß√£o fornecida dentro do () => {} √© executada.
    */
    console.log("[INFO] Tudo certo! WhatsApp conectado."); // log no terminal de confirma√ß√£o
});

client.initialize(); // inicializa a instancia do whatsapp

// Delay para simular digita√ß√£o
const delay = ms => new Promise(res => setTimeout(res, ms));

client.on('message', async msg => {

    console.log(`[DEBUG] Mensagem recebida: "${msg.body}" de ${msg.from}`); // log de depura√ß√£o no terminal

    if (!msg.from.endsWith('@c.us')) {
        console.log(`[IGNORADO] Mensagem de grupo de ${msg.from}`);
        return;
    }

    const chat = await msg.getChat();
    const contact = await msg.getContact();
    const name = contact.pushname || "Usu√°rio";
    const userId = msg.from;
    const userMessage = msg.body.trim();

    console.log(`[DEBUG] Mensagem processada: "${userMessage}"`);


    // Mensagem do menu com a logo
    if (/^\/?suporte\s*$/i.test(userMessage)) {

        console.log(`[MATCH] Reconhecido como comando de menu por ${userId}`); // logo no terminal

        const logo = MessageMedia.fromFilePath('logo.png'); // Envia a logo.png no corpo da mensagem

        console.log(`[DEBUG] Sess√£o 1 do c√≥digo - *Menu principal*`);
        await client.sendMessage(msg.from, logo, { caption: `üåç *Seu nome ** - Suporte de TI* üõ†Ô∏è\n\nOl√°, ${name}! Sou o seu assistente virtual do suporte t√©cnico. Como posso te ajudar hoje? Digite uma op√ß√£o:\n\n1Ô∏è‚É£ - Problemas com Wi-Fi\n2Ô∏è‚É£ - Problemas com login\n3Ô∏è‚É£ - Impressora n√£o imprime\n4Ô∏è‚É£ - Solicitar suporte t√©cnico` });
        
        console.log(`[ENVIADO] Menu enviado para ${userId}`);

        return;

    } else if (userMessage === '1') {
        await responder(chat, msg.from, `üì° *Problemas com Wi-Fi*\n\n1. Verifique se o roteador est√° ligado.\n2. Reinicie seu dispositivo.\n3. Caso o problema persista, entre em contato com o suporte blablabalabla....`);
    
    } else if (userMessage === '2') {
        await responder(chat, msg.from, `üîê *Problemas com login*\n\n1. Verifique se o CAPS LOCK est√° ativado.\n2. Tente redefinir sua senha.\n3. Caso o problema continue, abra um chamado com o suporte blablabalabla....`);
   
    } else if (userMessage === '3') {
        await responder(chat, msg.from, `üñ®Ô∏è *Impressora n√£o imprime*\n\n1. Verifique se h√° papel e tinta no equipamento.\n2. Reinicie a impressora e tente novamente.\n3. Caso continue com erro, entre em contato com o suporte blablabalabla....`);
   
    } else if (userMessage === '4') {
        console.log(`[INFO] Iniciando processo de suporte para ${msg.from}.`);
        console.log('Sess√£o 2 do c√≥digo - iniciando suporte de abertura de chamado')
        await delay(50);
        await chat.sendStateTyping();
        /*
        Aguarda 50 milisegundos para 'fingir' escrever.
        */ 
        await delay(50);
        // Aguarda mais 50 milisegundos para enviar.
        await client.sendMessage(msg.from, "üîß Ol√°! Bem-vindo ao Suporte TI da *seu nome* üèóÔ∏è\n\nPor favor, informe seu *nome* para prosseguir."); 
        console.log('Mensagem de suporte')
        userRequests[msg.from] = { step: 1 };
        return;
    }

    // Coleta nome
    if (userRequests[msg.from]?.step === 1) {
        userRequests[msg.from].name = msg.body;
        userRequests[msg.from].step = 2;
        console.log(`[INFO] Nome coletado: ${msg.body}`);
        await delay(50);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, "Agora informe o *setor* onde voc√™ trabalha.");
        return;
    }

    // Coleta setor
    if (userRequests[msg.from]?.step === 2) {
        userRequests[msg.from].setor = msg.body;
        userRequests[msg.from].step = 3;
        console.log(`[INFO] Setor coletado: ${msg.body}`);
        await delay(50);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, "Por √∫ltimo, descreva o problema que est√° enfrentando.");
        return;
    }

    // Coleta descri√ß√£o do problema e cria o chamado
    if (userRequests[msg.from]?.step === 3) {
        userRequests[msg.from].descricao = msg.body;
        console.log(`[INFO] Descri√ß√£o coletada: ${msg.body}`);
        await delay(50);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, "‚è≥ Criando seu chamado no sistema... Aguarde um momento.");

        // Envia os dados para o GLPI
        const ticketId = await createGlpiTicket(
            userRequests[msg.from].name,
            userRequests[msg.from].setor,
            userRequests[msg.from].descricao
        );

        if (ticketId) {
            console.log(`[SUCESSO] Chamado criado com ID #${ticketId} para ${msg.from}.`);
            await client.sendMessage(msg.from, `‚úÖ Seu chamado foi aberto com sucesso! N√∫mero do ticket: *#${ticketId}* üé´\n\nNossa equipe entrar√° em contato em breve.`);
        } else {
            console.error("[ERRO] Falha ao criar o chamado no GLPI.");
            await client.sendMessage(msg.from, "‚ùå Ocorreu um erro ao criar seu chamado. Por favor, tente novamente mais tarde.");
        }

        delete userRequests[msg.from];
        return;
    
    } else {
        console.log(`[DEBUG] Mensagem n√£o reconhecida: "${userMessage}"`);
        await responder(chat, msg.from, `‚ùì N√£o entendi sua solicita√ß√£o. Digite 'menu' para ver as op√ß√µes.`);
    }
});


async function responder(chat, user, text) {
    await delay(30);
    await chat.sendStateTyping();
    await delay(30);
    await client.sendMessage(user, text);
}
    